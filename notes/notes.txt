createServer()
서버를 만드는 함수
인자로 콜백 함수를 넣음
이 콜백 함수에 요청에 대한 응답, 즉 어떤 이벤트를 받았을 때 실행해야 하는 작업을 기술

req: request, 요청에 관한 정보를 담는 파라미터
res: response, 응답에 관한 정보를 담는 파라미터

res. writeHead() 응답에 대한 정보(헤더)를 기록하는 함수. 요청 코드(200: 요청 성공)와 콘텐츠 타입(text/html, 인코딩 타입: utf-8)을 넣음
res.write(): 클라이언트에 보낼 데이터
res.end(): 응답을 종료하는 메소드, 여기에 넣은 파라미터까지 전달하고 응답 종료

.listen(클라이언트와 연결할 포트번호, 서버가 연결되면 실행할 콜백 함수)

*** 오류가 발생해도 꼭 응답 콜백 함수를 작성해줘야 한다
--> 오류가 발생한 후 실행할 응답이 없다면 서버는 응답을 계속 기다리고 결국에는 timeout되기 때문
ex.
try {
	웹 페이지 요청
} catch(err) {
	오류 발생 시 동작
}

module.exports = 값 VS exports.프로퍼티 = 값
둘 다 exports 객체 활용
module.exports: 하나만 추가 가능
exports.프로퍼티: 여러 개 추가
	--> exports 객체에 필드를 추가하는 방식

express 기본 형태

const express = require('express'); <<< express 모듈 호출

const app = express();
app.set('port', process.env.PORT || 8080); <<< express 객체에 기본 포트 번호가 있으면 해당 포트 번호 사용 (process.env.PORT), 아니면 8080

app.get(
	'/', 
	(req, res) => {
		res.sendFile(__dirname + '/index.html');
	}
); <<< app.get(주소, 라우터), 주소에 대한 GET 요청이 올 경우 어떤 응답을 할 지 적어둔 것

app.listen(
	app.get('port'), 
	() => {
		console.log(app.get('port'), '번 포트에서 서버 실행 중..')	
	}
) <<< 서버 실행 시 콘솔 창에 띄울 내용

	
	

*** app.set(key, value) <<< 키/값 쌍을 이용해 설정, ~세터
*** app.get(key) <<< ~게터

*** http 요청 메소드 종류
GET: 리소스를 얻을 때 사용
HEAD: 문서의 정보를 얻을 때
POST: 리소스를 전송할 때
PUT: 내용 전체를 갱신할 때
PATCH: 내용을 부분적으로 갱신할 때
DELETE: 파일 삭제 시

app.use(): 미들웨어 사용. app.set()은 전역으로 사용되는 것과 차이

next(); >>> 다음 미들웨어로 넘어감
없을 경우 다음 미들웨어로 넘어가지 않고 거기서 응답 종료
next(error) >>> 오류 처리 미들웨어로 넘어감
오류 처리 시 인자로 err, req, res, next 사용

express 사용 시 일반적인 순서
express 호출
포트 설정
공통적으로 사용하는 미들웨어 장착
라우터 구성
404 처리 미들웨어 구성
오류 처리 미들웨어 구성

app.get('/user/:id', (req, res) => { ... } )
	>>> localhost:8080/user/아이디 입력에 대한 응답으로 보낼 내용

*** 응답을 위한 함수
res.send(): 문자열로 응답
res.json(): json 객체로 응답
res.render(): Jade, Pug와 같은 템플릿을 렌더링하여 응답
res.sendFile(): 파일로 응답 (ex. html 파일 등)


node 시작 전 해야할 것들
    1. console >>> npm init: 초기화 + package.json 생성 (패키지 정보 관리)
    2. 패키지명, entry point 입력 (entry point: 서버를 실행시킬 파일)
    3. .vscode/launch.json >>> add configuration >>> Node.js: Launch Program 선택
    4. 생성된 configurations에서 program >>> "${workspaceFolder}/${file}" 로 설정

    *** .vscode 없을 때: settings.json 열기 >>> ctrl+  shift + p >>> preferences: open workspace settings (json)
    *** launch.json 없을 때: 좌측 디버깅 창 >>> 드롭 다운 메뉴 >>> Add Debug Configuration

모듈 종류
    기본(코어) 모듈, 확장 모듈: 기본 포함 사항 외엔 확장 모듈
    일반 모듈, 네이티브 모듈: 자바스크립트로 작성했으면 일반 모듈, 다른 언어면 네이티브
    지역 / 전역 모듈: 현재 웹을 사용하기 위해서만 만들었으면 지역 모듈, 어디서든 사용할 수 있게 했다면 전역 모듈
    서드 파티 모듈: npm install로 설치한 모듈. aka 확장 모듈

모듈을 내보내는 방법
    1. exports
        exports 객체의 멤버로 추가해 내보내는 방식
        여러 개를 내보낼 수 있음
    2. module.exports
        단일 값만 할당 가능
        module.exprots 객체에 할당된 값 자체를 require로 받음

require의 인자로는 디렉토리도 가능. 이러면 하위 파일도 같이 딸려옴

자바스크립트는 순환 참조 허용

*** p86, 87 원인
require 하는 시점에서 객체는 아직 exports 되지 않은 상태
    A2의 경우
        1. line 04에서  B2 require
        2. B2로 넘어감
        3. B2의 line 03에서 A2 require. 이 때는 A2에서 아무것도 exports 안된 시점
        4. B2의 line 06 실행 결과 [object ... ~~ ] in B2.js 와 같이 출력
        5. B2의 line 08에서 const B export
        6. A2의 line 06 실행 결과는 정상적으로 출력
        7. A2의 line 08 도달. 이 때가 되어서야 A2에서 export한 내용 발생 (const A)

REST
    요청을 보낼 때, 주소를 통해 내용을 표시하는 것
    뒤에 붙는 주소 (ex. www.aaa.com이 기본 주소, 그 뒤에 /login, /post와 같은 것들)에 따라 요청을 정의할 수 있도록 주소체계를 구조화하여 만든 웹 서버를 RESTful 하다고 함



req, res
    req: request; 요청에 관한 정보를 담은 객체
    res: response; req에 대한 응답 내용을 담은 객체

res.writeHead( 요청 코드, { 헤더 항목 이름: 값 } )
    응답에 대한 헤더의 내용 기록
    ex. res.writeHead(404, { 'AAA': 999 }) >>> 페이지가 없을 경우에 보내는 헤더에서 'AAA' 항목을 999로 설정

res.write( ... )
    클라이언트에 보낼 데이터
    즉, 응답 결과 페이지에 표시할 내용
    ex. res.write('<p>toxic</p>') >>> 화면에 'toxic' 표시

res.end( ... )
    응답 종료 + 맨 마지막에 전달할 데이터
    ex. ... res.end('<p>END OF PAGE</p>') 화면에 'END OF PAGE'까지 표시 + 응답 종료

서버.listen( 포트 번호, 콜백 )
    포트 번호와 서버가 연결됐을 경우 지정한 콜백 함수 실행
    ex.http.createServer( ... ).listen(8080, () => { console.log('CONNECTED') } ) >>> 8080 포트로 연결되면 콘솔에 'CONNECTED' 출력
    
서버.on('이벤트 이름', 콜백)
    이벤트 발생 시 실행할 콜백 지정
    ex. on('error', () => { console.log('ERROR OCCURED'); }); >>> 에러 발생 시 콘솔에 'ERROR OCCURED' 출력

*** 오류에 응답할 때에도 서버측에서 실행할 콜백을 만들어놔야 한다 (~ p.96 3-7 line 15-17)



p.97 3-9 해석
6: 클라이언트 측에 응답으로 제공할 내용 읽어오기. 다 읽어와야 하기 때문에 콜백에 async, 파일 읽기 부분에 await fs.read...와 같이 작성
7 ~ 8: 잘 읽어왔으면 이 부분 실행 >>> 헤더 작성 + end로 읽어온 파일 내용 전송
9 ~ 12: 6 ~ 8 실행 중 오류 발생 시 오류 출력 + 오류 관련 사항을 헤더에 작성 + 오류 메시지 전달과 함께 응답 종료



node_modules: express 설치 시 같이 오는 모듈들

express 모듈 내 기능
    .set('키', 값)
        특정 요소를 지정한 값으로 설정
        ex. .set('port', 8080) >>> 포트 번호를 8080으로 설정
    
    .get('주소', 라우터)
        주소 요청 시 지정한 라우터로 응답
        ex. .get('abc/login', (req, res) => { res.sendFile(__dirname + '/login.html') } )
            >>> 주소 'abc/login'에 대한 응답으로 현재 위치의 login.html 파일 전송
    
    .res.sendFile( '파일 이름' );
        지정한 위치의 파일 전송 + 헤더 내용과 같은 정보들도 알아서 설정
    
    .get('키')
        주어진 키에 해당하는 값 획득
    
    .listen( 포트, 콜백 )
        포트 연결 + 서버 실행 + 포트-서버 연결 성공 시 실행할 콜백
    


express에서의 미들웨어
    요청과 응답 사이에 express에 있는 기능 외에 추가 기능을 넣을 때 사용하는 것
    app.use()를 통해 사용
    *** app.use <> app.set
        use: 지역에서 사용
        set: 전역으로 사용

p.111의 3-15와 3-16의 차이
    3-15
        app.get에 있는 res.send까지만 하고 응답 종료
        >>> 뒤에 app.use가 있어도 미들웨어를 보내지 못함 (미들웨어 전송 전에 이미 응답을 마쳤기 때문)
    3-16
        res.send 이후 next()를 통해 다음 미들웨어로 흐름 이동 >>> 미들웨어 작동
        이 때 app.get의 콜백과 미들웨어에 있는 함수 인자로 next 추가
        즉, 미들웨어엔 기본 3개의 인자(req, res, next) 필요

next(): 다음 미들웨어로 흐름 이동
next(error): 오류 처리 미들웨어로 이동

오류 처리 미들웨어에는 추가로 error 인자까지 필요

express를 이용한 서버 구축 과정 골조
    1. require express
    2. 포트 설정
    3. 공통적으로 사용할 미들웨어 장착
    4. 라우터 구성
    5. 오류 처리 미들웨어 구성 (ex. 404, 500, 기타 오류 등)
    6. app.listen
    


자주 사용하는 미들웨어

express.static
    정적 파일을 다룰 수 있게 하는 express 내장 미들웨어
    (ex. CSS, 이미지 등 별도 처리 없이 그냥 보여주기만 하면 되는 파일들)
    
    불러오기: app.use(express.static(static 폴더로 지정할 파일 경로));
    사용 방법은 위에 있는게 전부 
    >>> static 폴더 경로만 지정해두고 res.sendFile로 보낼 html 문서에 'static 폴더 경로 + 파일 이름'만 잘 지정하면 알아서 보내준다

router
    request에 서버가 어떤 response를 보낼 지 결정하는 미들웨어
    express에선 모듈을 담은 변수(~app) 뒤에 http 메소드가 붙은 것 (ex. app.use('/경로', 미들웨어), app.get, app.post ...)
    메소드의 첫번째 인자로 넣은 경로로 요청이 들어오면 두 번째 인자로 넘긴 미들웨어를 실행한다.
    여기서
        첫 번째 인자: 서버 자원을 가리키는 URI 문자열
        두 번째 인자: 라우팅 로직 함수를 콜백 형태로 구현한 것. 즉 해당 주소 요청 접수 시 수행할 작업



*** 응답에 사용하는 함수
    res.send(): 문자열로 응답
    res.json(): json으로 응답
    res.sendFile(): 파일로 응답 >>> 파일을 통째로 보내는 방식?
    res.render()



morgan & winston
    morgan
        로그를 보기 좋게 찍어주는 API
        router 상태, 값, request / response 등을 콘솔에 표시
        옵션
            dev: 개발 시 사용, 요청 메소드, URL, 상태, 응담 시간 등 표시
            combined: + 사용자 주소, 브라우저 등
    winston
        로그를 json 형태로 dump 파일에 기록하는 모듈

express.json, express.urlencoded
    요청 정보를 파싱하고 req.body로 옮겨주는 모듈
    클라이언트에서 post, put 요청 시 req.body에 접근하기 위해 필요 (요청 정보는 request body에 있기 때문)
    express.json은 request body가 json 형태일 때 사용
    express.urlencoded는 요청하는 내용이 폼일 때 사용

*** express.urlencoded에서 { extended: true }를 사용하는 이유
    if true, npm의 qs 모듈 사용
    효과: 추가 보안

cookie-parser
쿠키
    클라이언트를 식별하기 위해 사용하는 키-값 쌍으로 이뤄진 정보
    쿠키를 가지지 않은 상태에서 요청이 들어올 경우 서버는 최초 1회에 한해 쿠키를 응답과 함께 전달하고
    나중에 한 번 더 요청이 필요하면 클라이언트는 쿠키와 함께 요청을 보내 그에 맞는 응답을 받는다
    쿠키는 서버가 res.writeHead( { 'Set-Cookie': 'name=juan' } )과 같이 설정한다
    
    쿠키 값에 접근하려면 req.headers.cookie에 저장된 문자열을 가공해야 한다
        ex. 'name=juan'의 경우 name의 값을 알아내기 위해 'name='을 떼어내는 작업이 필요하다
    
    cookie-parser 사용 시 express의 req 객체에 cookies 속성이 부여되므로 res.cookies.쿠키이름 을 통해 쿠키 값에 접근할 수 있다
    
express-session
    세션: 정보를 클라이언트 측에 저장해두는 것이 아닌, 서버 측에 저장해 접근할 수 있도록 하는 것. 클라이언트 측에는 대신 암호화된 값을 전송해준다.
    cookies.session 값을 이용해 세션을 다루는 대신 req 객체에 부여된 session 속성으로 세션 값을 활용할 수 있다














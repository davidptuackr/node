API?
    서로 다른 응용 프로그램 사이의 인터페이스
    ~ 응용 프로그램 사이의 소통 방법

request를 이용한 API 활용 예시: 네이버 검색 API

express객체.get(
    '라우팅 경로', 
    (req, res) => { // req: request 객체, res: response 객체 >>> req != request 모듈
        const 클라이언트 ID = 발급받은 클라이언트 ID
        const 클라이언트 시크릿 = 발급받은 secret
        const API URL = 'API 경로'
        const option = { }
        const options = {
            url: API URL,
            qs: option,
            headers: {
                'X-Naver-Client-Id': 클라이언트 ID,
                'X-Naver-Client-Secret': 클라이언트 시크릿
            }
        }
        
        request.get(
            options,
            (error, response, body) => {
                if (!error && response.statusCode == 200) { // 에러 없이 응답에 성공했다면
                    let news_item = JSON.parse(body).items // 응답 내용으로 보낸 뉴스 내용(body)을 파싱해서 담아둔다
                }
                const news_json = { 
                    title: [ ],
                    link: [ ],
                    desc: [ ],
                    date: [ ]
                }
                for (let i = 0; i < news_item.length; i++) {
                    news_json의 각 힝목에 news_item[i].항목 추가
                    ex. 뉴스 개시 일자 추가: news_json.title.push(news_item[i].pubDate);
                }
                res.json(news_json); // news_json을 .json으로 변경하여 응답 결과 표시
            } else {
                에러 내용 출력
            }
        ...

express 객체.listen(포트 번호, 콜백)

*** 네이버 API 요청 변수 정보
    query
        검색을 원하는 문자열로 UTF-8 인코딩
        String type, 지정 필수, 기본값 없음
        ex. ...query=coffee >>> 'coffee' 검색 결과
    display: 검색 결과 수 >>> ~개 표시
    start: 검색 시작 위치
    sort: if sim, 유사도 순으로 정렬, if date, 날짜순 정렬



*** request 모듈의 한계
    - deprecated 됨 >>> 업데이트 없음
    - 비동기 처리 필요



axios

axios 주요 특징
    Promise 반환
    async/await 사용 가능

axios가 요청을 보내는 형태
    1. axios(url, [, config])
        url과 config를 넣어 GET 요청 전송 (config는 optional)

    2. axios(config)
        요청 관련 정보를 속성만 있는 객체에 담아 요청 전송. 
        여기서의 config는 필수
        config는 { 옵션 이름: 값 } 형태의 객체로 전달할 것
        ex. EDGAR API + 'data/cik=123'을 GET 요청하고자 할 경우
            axios( 
                {
                    method: 'get',
                    url: 'data/cik=123',
                    기타 옵션 ...
                }
            )
    3. axios.요청방식(url[, data[, config]]) 형식의 메소드 ( [ ] 안은 optional)
        GET 요청: axios.get(url[, config])
        DELETE 요청: axios.delete(url[, config])
        ...
    
axios 활용 예시: 공공데이터
...
app.get(
    '/airkorea',
    async (req, res) => {
        서비스 키
        url = encodeURI('API 경로') + 파라미터들

        try {
            result = await axios.get(url)
            res.json(result.data)
        } catch ...
...
코드 상세
    async (req, res) => { ... try { const result = await axios.get(url) ... }
        axios.get(url)로 요청한 결과를 다 받아올 때까지 기다리기 위해 async, await 사용
        안그러면 결과가 오기도 전에 다음 문장 (res.json(result.data)) 실행 >>> 아무것도 안나옴
    
    res.json(result.data);
        result의 data 부분을 json 형태로 응답



axios 활용 에시 2: 위 코드에서 try - catch 블록만 살짝 바꿔서 원하는 결과만 표시하기
    *** 교재 내용은 예전 내용. 바뀐 형태는 result.data.response.body.items[0]에 필요한 내용들이 들어가 있고 items[0]['필요한 내용'] 형식으로 골라낸다
    *** 문자열 중간에 특정 값을 삽입하려면 
        1. ` ... ` 로 감쌀 것 (esc 아래 키)
        2. 삽입할 위치에 ${...} 형태로 문자열에 넣을 것
    
try {
    const result = await axios.get(url);
    const items = {
        'location': 'MAPO', // 응답 결과에 지역 정보는 빠져있다
        'time': result.data.response.body.items[0]['dataTime'],
        'pm10': result.data.response.body.items[0]['pm10Value'],
        'pm25': result.data.response.body.items[0]['pm25Value']
    }
    res.send(
        `
            LOCATION: ${items.location}<br>
            TIME: ${items.time}<br>
            PM10: ${items.pm10}<br>
            PM2.5: ${items.pm25}
        `
    )
}



dotenv
    보안성 향상을 위해 사용하는 모듈
    .env 파일 내에 ( 키 = 값 ) 형태로 작성한 api key같은 내용을 process.env에 추가하는 역할을 한다
    .env 파일을 가져오려면 파일 경로 처리도 필요하기 때문에 'path' 모듈과 같이 활용한다

    활용방법
        1. dotenv, path require
        2. dotenv.config( { path: path.resolve( .env 디렉토리 ) } )
        3. 이후엔 .env 안에 있는 값을 쓰려면 process.env.키 형태로 불러오면 된다 
            (ex. api_key = 발급한 API 키 와 같이 저장했다면 >>> process.env.apikey)



캐싱
    결과물을 어디에 당분간 보관했다 요청이 들어올 때 이를 제공해주는 것
    똑같은 요청을 매번 해석 + 가공하면 자원 낭비이므로 효율 증대를 위해 사용

redis
    키-값 형태로 저장하는 nosql 
    저장: set key value
    특정 키의 값 읽어오기: get key

js X redis 과정
    1. redis 모듈 require
    2. redis 연결 지정: const client = redis.createClient(redis 포트 번호, '서버')
        (기본 값으로 하려면 (6379, '127.0.0.1'))
    3. 연결 생성
        3.1 지정한 연결을 활성화하는 것은 비동기 처리가 필요하므로 연결을 활성화 하는 async 함수를 다음과 같이 정의한다
            async function ...() {
                await client.connect(); 
            }
        3.2 위에서 정의한 함수 실행 
    4. 값 가져오기
        4.1 값을 가져올 땐 동기화가 필요하므로 다음과 같이 값을 가져오는 async 함수 정의
            async function ...(가져올 값의 키) {
                await client.IRange(key, 시작위치, 종료위치);
        }
    5. 값 넣기
        client.connect() 완료 후 client.rpush('키', '값') (숫자도 문자열 형태로 전달)
        
3, 4는 await 처리한 부분이 끝나기 전에 다른 곳으로 넘어가면 안되기 때문에 비동기 처리는 필수다 >>> async
5는 저장할 키:값 쌍을 넘기면 그 뒤는 redis에서 알아서 처리하기에 비동기 처리할 필요가 없다

IRange?
    값이 배열일 때 사용할 수 있는 함수
    인자: (키, 시작, 종료) >>> 종료 위치가 -1이면 배열 끝까지 읽어옴



redisv4 코드 분석

await client.connect(); : redis 접속
const cachedItems = await client.lRange('airItems', 0, -1); : redis에서 키가 'airItems'인 데이터 읽어오기. 다 읽기 전까지 대기

if (cachedItems.length)
    redis에 'airItems'가 있다면 0이 아니라 true이므로 저장된 데이터로 res.send
    아니면 false이므로 else 블록 실행

try { ... }
    redis에 airItems로 들어갈 데이터 구성
    airItems.forEach((val) => {client.rPush('airItems', val)}: redis에 가공한 데이터 삽입이 이뤄진다
    client.expire('airItems', 60*60): 1시간 후 'airItems'를 redis에서 없애기 위한 것 (최신화하기 위해)
    마지막엔 읽어온 데이터를 출력할 수 있도록 새로고침 유도



REST: REpresentatinal State Transfer
    - 요청된 주소만 보고도 어떤 내용에 관한 요청인지 예상할 수 있게 하는 형식
    - 여기서 자원을 구조와 함께 나타내는 형태를 URI 라고 한다
    - RESTful하게 API를 만들면 ( URI + http 요청 메소드 )를 보고 어떤 요청인지 파악할 수 있다

*** 참고: URL? URI?, URN?
    URI
        식별자
        이를 얻기 위해 '어떻게 가라' 까지는 없음. 즉 프로토콜까진 없음
        ex. localhost:8080/airs, https://localhost:8080/airs 다 URI(두번째껀 추가로 '어떻게 가라' 까지 나와있는 형태. 즉 URL)
    URL
        식별자 + 접근 방법(=프로토콜) (URL ∈ URI)
        ex. https://localhost:8080/airs
    URN
        상세 사항들 (~ 이미지 파일명, 문서 이름 ...)
        ex. https://localhost:8080/airs/cloud.png에서 /cloud.png 부분

*** 참고: http 요청 메소드
    POST: 데이터 추가 (~create)
    GET: 데이터를 읽거나 조회 (~read)
    PUT: 데이터 변경 (~update)
    PATCH: 일부만 변경 (put은 전부 변경)
    DELETE: 데이터 삭제

    POST로 보냈다고 꼭 데이터 추가와 관련된 요청은 아니다.
    POST로 보냈어도 모든 기능에 대한 요청이 될 수도 있다. 
    하지만 URI를 보고 어떤 작업을 해야 하는지 알 수가 없고, URI에 뭔가를 더 적어놓아야 좀 알 수가 있다
    이런 것을 지양하기 위해 REST 규칙 중에 URI는 명사로 이뤄져야 한다는 것이 있다
    결론은? 목적에 맞게 요청 메소드를 보내도록 한다



REST 예시

1. GET/ https://edgar/fillings/ 는 어떤 동작을 하도록 만들 수 있는가?
    >>> fillings.html을 읽어온다

2. GET/ https://edgar/filings?form=10k
    >>> fillings.html에서 문서 형식이 10k인 데이터만 읽어온다?



API 서버 만들기

p.165 코드 분석
app.get(
    '/:type',
    (req, res) => {
        let {type} = req.params;
        res.send(type);
    }
);
    URI의 콜론 뒤에 오는 path(여기선 type)은 어떤 것이든 올 수 있다
    그렇게 들어온 값은 req.params에 저장된다 >>> let {type} = ...
    읽어온 req.params를 응답으로 보낸다
    ex. (주소)/texas와 같이 들어온다면
        req.params = texas
        res.send는 texas 라는 문자열로 응답 >>> 화면에 texas 출력

p.166 코드 분석
    line 20 ~ 22
        메소드: GET >>> 읽거나 조회
        요청: '/' (기본 주소)
        응답 결과: 'this is api.js' 출력

    line 25 ~ 27
        메소드: GET
        요청: /board
        응답 결과: 게시글 목록(boardList) 전송
    
    line 29 ~ 40
        메소드: POST >>> 추가
        요청 URI: /board
        응답 결과
            1. POST + /board >>> POST 메소드로 /board 요청 시 
            2. 서버에서 만든 ID, req.body에 실어온 내용(user_id, title, content)로 객체 생성
            3. 만든 객체를 서버의 boardList에 추가
            4. /board로 리디렉션 >>> == GET /board
        
    line 42 ~ 62
        메소드: PUT >>> 수정
        요청 URI: /board/:id (/board/수정할 게시글 ID)
        응답 결과
            1. line 44 ~ 46: ID가 :id로 넘긴 값과 같은 게시글이 있는지 서버에서 탐색
            2. line 48: 찾아낸 게시글의 인덱스를 const idx에 저장
            3. line 49: 서버 게시글 목록에서 idx번 글을 하나만 삭제 (Array.splice(시작, ~개))
            4. 게시글 삭제 요청을 한 유저의 정보로 새 게시글 생성
            5. /board로 리디렉션
    
    line 64 ~ 73
        메소드: DELETE >>> 삭제
        요청 URI: /board/:id
        응답 결과
            1. line 66 ~ 68: 게시물 ID가 :id인 게시물이 있는지 서버에서 탐색. 있다면 해당 게시물 반환
            2. line 69: 해당 게시물의 인덱스 파악
            3. line 70: 해당 게시물을 boardList에서 제거
            4. /board로 리디렉션
            
            

p.172~173 코드 분석
    line 31 ~ 56
        1. line 32: request 객체에 있는 파라미터를 let type, apikey에 저장
        2. line 33: URL 파싱 정보 중 쿼리스트링을 추출
        3. line 35: API 키와 UUID가 유효하다면 다음 작업 수행
        4. line 36 ~ 41
            type이 search면. 즉 게시물 내용으로 검색하는 요청이었다면 (36)
            쿼리스트링에서 키워드를 추출해 (37)
            데이터베이스에 있는 게시물 정보 중 키워드를 포함하는 게시물만 뽑아낸 것을 (38 ~ 40)
            응답으로 전달 (41)
        5. line 43 ~ 39
            type이 user였을 경우. 즉 닉네임으로 게시물을 검색하는 요청이었을 경우
            쿼리스트링에서 유저 정보 부분을 추출해
            DB 내 게시물들 중 해당 유저가 작성한 글만 선택해
            응답으로 전달
        6. 그 외의 경우
            6.1 쿼리스트링이 user, search가 아니라면 잘못된 URL이라고 응답
            6.2 유효하지 않은 API 키나 UUID면 잘못된 API 키라고 응답



CORS 오류 (Cross Origin Resource Sharing), SOP (Same Origin Policy)
    Origin?
        URI에서 프로토콜 + 도메인 + 포트 번호 부분
        
    SOP?
        같은 출처(origin)에 대한 요청만 허락하는 보안 정책
        상세
            1. 보통 출처에서 포트 번호 부분은 생략 가능하다
            2. 근데 이를 악의적으로 이용해 원본과 비슷하게 만든 사이트로 들어가도록 유도하도록 한다면 문제가 발생할 수 있다
                예를 들면
                    검색 결과 맨 위에 표시된 edgar.gov로 들어가 회원 가입을 했는데
                    알고보니 원본 사이트는 edgar.gov:8080이지만
                    내가 들어간 곳은 edgar.gov:9999였고, 가입할 때 입력한 개인정보를 여기서 꿀꺽할 수도 있다는 것이다
            3. 때문에 이를 방지하고자 출처가 같은지 브라우저 단에서 검사하도록 한다
                (참고로 익스플로러는 출처에서 포트 번호 부분은 무시하고 나머지만 검사한다 :( )
            4. 단, CORS 정책을 허용한 경우엔 출처가 다른 경우에도 응답 결과를 수용할 수 있다
    
    CORS 오류?
        CORS 정책을 허용하지 않은 상태에서 다른 출처의 리소스를 요청했을 경우 발생하는 문제
        이를 해결하기 위해선
            1. 서버 단에서 요청이 들어온 출처의 응답 결과와 함께 응답 헤더에 Access Control Allow Origin을 같이 넣는 방법
            2. cors 모듈을 이용해 라우터 별로 CORS 정책 허용 여부를 결정하는 방법


    *** 번외: CORS를 허용했을 때 동작 방식
        기본 골자는 응답 헤더의 Access-Control-Allow-Origin의 값을 '해당 리소스는 접근이 허용된 출처' 라고 설정하는 것
        
        CASE 1. Preflight Request
            0. 여기서는 OPTION이라는 메소드를 사용한다
            1. 브라우저에 리소스를 받아오라는 명령을 내리면 브라우저 단에서 1차로 예비 요청을 보낸다
            2. 이 요청에 대한 서버의 응답은 현재 자신이 어떤 것을 허용 / 금지하는지에 대한 정보다
            3. 브라우저는 요청 정보와 응답을 비교했을 때 이 요청이 적절하다고 판단했을 때 본 요청을 보낸다
            4. 브라우저가 본 요청 결과를 받아 표시한다
        
        CASE 2. Simple Request
            1. Preflight 따위 없이 그냥 본 요청을 보낸다
            2. 브라우저가 요청에 대한 응답을 받았을 때 CORS 정책 위반 여부를 검사한다
            3. 적절한 요청이었으면 표시, 아니면 CORS 오류
            *** 단 Simple Request는 조건들을 만족해야만 할 수 있다
            
        CASE 3. Credentialed Request



















